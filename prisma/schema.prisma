// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "mysql"
//   url      = "mysql://schoolAttendance:Sensarsoft%40123@localhost:3306/money_manager"
// }
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  notes        Note[]
  transfers    Transfer[]
}


model Transaction {
  id        Int             @id @default(autoincrement())
  amount    Decimal         @db.Decimal(10, 2)
  type      TransactionType
  category  String
  note      String?
  account   String?
  date      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TransactionType {
  Income
  Expense
}

model Transfer {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  from      String
  to        String
  date      String
  amount    Decimal  @db.Decimal(12, 2)
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Transfer {
//   id     Int      @id @default(autoincrement())
//   amount Decimal  @db.Decimal(10, 2)
//   note   String?
//   date   DateTime @default(now())

//   // from user
//   fromUserId Int
//   fromUser   User @relation("TransferFrom", fields: [fromUserId], references: [id])

//   // to user
//   toUserId Int
//   toUser   User @relation("TransferTo", fields: [toUserId], references: [id])
// }

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  date      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Category {
//   id        Int          @id @default(autoincrement())
//   name      String
//   type      CategoryType
//   isDefault Boolean      @default(false)
//   userId    Int
//   user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
//   createdAt DateTime     @default(now())
//   updatedAt DateTime     @updatedAt
// }

// enum CategoryType {
//   Income
//   Expense
// }

// model Category {
//   id        Int          @id @default(autoincrement())
//   name      String
//   type      CategoryType
//   isDefault Boolean      @default(false)
//   userId    Int
//   user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
//   createdAt DateTime     @default(now())
//   updatedAt DateTime     @updatedAt
// }

// enum CategoryType {
//   Income
//   Expense
//   Account
// }